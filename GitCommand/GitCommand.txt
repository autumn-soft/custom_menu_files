============================================================================
; Gitのコマンドを入力するためのカスタムメニューです。
; 作者：オータム西野
; 
; 空白行や行頭に「;(セミコロン)」や「=(イコール)」のある行はコメント行です。
; 詳しい書式は、オンラインヘルプの「メニュー作成用ファイルの説明」を
; 参照してください。
; 
; メニュー項目の構成などは各自で自由に変更してみてください。
; 使用しない項目は削除したり、新しい項目を追加したり・・・
; 
; ちなみに、PowerShellで「git log」などのコマンドを使用すると
; 日本語が文字化けすることがありますが、その場合には以下のような
; コマンドでグローバル設定を変更することで対処することができます。
; git config --global core.pager "LESSCHARSET=utf-8 less"
============================================================================

; よく使用するコマンドをトップに出しておきます

現在の状態を表示 | git status
「新規／更新／削除」ファイルをステージング | git add -A
ステージング済みのファイルをコミット... |
	[/][#|コミットメッセージを入力]
	[/]git commit -m "[#1]"
/E
ログを表示（樹形図スタイル） | git log --graph --decorate --oneline --all
-
ローカルブランチの一覧表示 | git branch -v
作業するブランチを切り替える... |
	[/][#|切り替えるブランチの名前]
	[/]git switch [#1]
/E
-
リモートリポジトリの更新内容をフェッチ | git fetch
リモートリポジトリから現在のブランチにプル | git pull
現在のブランチをプッシュ | git push
-

================================================================
+リポジトリの作成
	現在のフォルダにリポジトリを作成 | git init
	名前を指定してリポジトリを作成... |
		[/][#|作成するリポジトリの名前]
		[/]git init [#1]
	/E
	-
	指定したサイトのクローンを作成... |
		[/][#|サイトのURL（またはローカルディレクトリ名）|
		リポジトリを作成するディレクトリの名前（省略可）]
		[/]git clone [#1] [#2]
	/E
	指定したサイトのクローンを作成（ベアリポジトリ）... |
		[/][#|サイトのURL（またはローカルディレクトリ名） | 
		リポジトリを作成するディレクトリの名前（省略可）]
		[/]git clone --bare [#1] [#2]
	/E
..

+ステータス／ログ
	現在の状態を表示 | git status
	現在の状態を表示（短縮形式） | git status --short --branch
	-
	ログを表示 | git log
	ログを表示（直近のｎ個）... |
		[/][#|履歴を表示する個数]
		[/]git log -n [#1]
	/E
	ログを表示（１行スタイル） | git log --oneline
	ログを表示（樹形図スタイル） | git log --graph --decorate --oneline --all
	-
	ログを検索（メッセージで検索）... |
		[/][#|検索するテキスト]
		[/]git log --oneline --grep=[#1]
	/E
	ログを検索（ユーザー名で検索）... |
		[/][#|検索するユーザーの名前]
		[/]git log --oneline --committer=[#1]
	/E
	ログを検索（ファイル名で検索）... |
		[/][#|検索するファイルの名前]
		[/]git log --oneline [#1]
	/E
	-
	HEADの移動を記録した内部履歴（reflog）を表示 | git reflog
..

+ステージング／コミット
	指定したファイルをステージング... |
		[/][#|ステージングするファイルの名前]
		[/]git add [#1]
	/E
	すべての「新規／更新／削除」ファイルをステージング | git add -A
	同上（ただし、カレントディレクトリ以下） | git add .
	すべての「更新／削除」ファイルをステージング | git add -u
	-
	指定したファイルをステージングエリアと作業ディレクトリから削除... |
		[/][#|削除するファイルの名前]
		[/]git rm [#1]
	/E
	指定したファイルをステージングエリアから削除... |
		[/][#|削除するファイルの名前]
		[/]git rm --cached [#1]
	/E
	-
	ステージングエリア上の指定したファイルの内容を表示... |
		[/][#|表示するファイルの名前]
		[/]git show :[#1]
	/E
	-
	ステージング済みのファイルをコミット... |
		[/][#|コミットメッセージを入力]
		[/]git commit -m "[#1]"
	/E
	すべての「更新／削除」ファイルをステージングしてコミット... |
		[/][#|コミットメッセージを入力]
		[/]git commit -a -m "[#1]"
	/E
	直近のコミットを修正する... |
		[/][#|コミットメッセージを入力]
		[/]git commit --amend -m "[#1]"
	/E
..

+ブランチ／チェックアウト
	+ブランチの一覧を表示
		ローカル | git branch
		ローカル：IDとMSGも表示 | git branch -v
		ローカル＋リモート | git branch -a
		ローカル＋リモート：IDとMSGも表示 | git branch -a -v
		上流ブランチの一覧を表示 | git branch -vv
	..
	+ブランチの作成
		HEADの位置に作成... |
			[/][#|作成するブランチの名前]
			[/]git branch [#1]
		/E
		HEADの位置に作成（チェックアウトする）... |
			[/][#|作成するブランチの名前]
			[/]git switch -c [#1]
		/E
		-
		指定したコミット位置に作成... |
			[/][#|作成するブランチの名前 | ベースとなるコミット]
			[/]git branch [#1] [#2]
		/E
		指定したコミット位置に作成（チェックアウトする）... |
			[/][#|作成するブランチの名前 | ベースとなるコミット]
			[/]git switch -b [#1] [#2]
		/E
		-
		上流ブランチを指定して作成... |
			[/][#|作成するブランチの名前|上流ブランチの名前]
			[/]git branch --track [#1] [#2]
		/E
		上流ブランチを指定して作成（チェックアウトする）... |
			[/][#|作成するブランチの名前|上流ブランチの名前]
			[/]git checkout -b --track [#1] [#2]
		/E
	..
	+上流ブランチの設定／解除
		現在のブランチの上流を設定... |
			[/][#|上流ブランチの名前]
			[/]git branch -u [#1]
		/E
		指定したブランチの上流を設定... |
			[/][#|設定するブランチの名前|上流ブランチの名前]
			[/]git branch [#1] -u [#2]
		/E
		-
		現在のブランチの上流を解除 |
			[/]git branch --unset-upstream
		/E
		指定したブランチの上流を解除... |
			[/][#|上流の設定を解除するブランチの名前]
			[/]git branch --unset-upstream [#1]
		/E
	..
	+ブランチの削除
		ローカルブランチを削除... |
			[/][#|削除するブランチの名前]
			[/]git branch -d [#1]
		/E
		リモートブランチを削除... |
			[/][#|削除するリモートブランチの名前]
			[/]git push origin :[#1]
		/E
	..
	-
	+「ブランチやコミット」のチェックアウト
		ブランチを指定... |
			[/][#|チェックアウトするブランチの名前]
			[/]git switch [#1]
		/E
		コミットやタグを指定... |
			[/][#|チェックアウトするコミットやタグの名前]
			[/]git checkout [#1]
		/E
	..
	+「ファイル」のチェックアウト
		ステージングエリアから作業ディレクトリ... |
			[/][#|チェックアウトするファイルの名前]
			[/]git checkout -- [#1]
		/E
		指定したコミットからステージングエリアと作業ディレクトリに... |
			[/][#|チェックアウトするファイルの名前 | そのファイルがあるコミット]
			[/]git checkout [#2] -- [#1]
		/E
	..
	-
	ブランチの名前の変更... | 
		[/][#|変更前のブランチの名前 | 変更後のブランチの名前]
		[/]git branch -m [#1] [#2]
	/E
..

+ディファレンス
	作業ディレクトリとステージングエリアの比較 | git diff
	作業ディレクトリとステージングエリアの比較（ファイル名のみ） | git diff --name-only
	-
	作業ディレクトリとHEADの比較 | git diff HEAD
	作業ディレクトリと指定したコミットの比較... |
		[/][#|比較するコミット]
		[/]git diff [#1]
	/E
	-
	ステージングエリアとHEADとの比較 | git diff --cached
	ステージングエリアとHEADとの比較（ファイル名のみ） | git diff --cached --name-only
	-
	２つのコミット間の比較... |
		[/][#|コミット１ | コミット２]
		[/]git diff [#1] [#2]
	/E
	２つのコミット間の比較（ファイル名のみ）... |
		[/][#|コミット１ | コミット２]
		[/]git diff [#1] [#2] --name-only
	/E
	-
	+difftoolを起動して比較
		作業ディレクトリとステージングエリアの比較 | git difftool
		作業ディレクトリとステージングエリアの比較（ファイル名のみ） | git difftool --name-only
		-
		作業ディレクトリとHEADの比較 | git difftool HEAD
		作業ディレクトリと指定したコミットの比較... |
			[/][#|比較するコミット]
			[/]git difftool [#1]
		/E
		-
		ステージングエリアとHEADとの比較 | git difftool --cached
		ステージングエリアとHEADとの比較（ファイル名のみ） | git difftool --cached --name-only
		-
		２つのコミット間の比較... |
			[/][#|コミット１ | コミット２]
			[/]git difftool [#1] [#2]
		/E
		２つのコミット間の比較（ファイル名のみ）... |
			[/][#|コミット１ | コミット２]
			[/]git difftool [#1] [#2] --name-only
		/E
	..
..

+マージ／リベース／チェリーピック
	指定したブランチを現在のブランチにマージ... |
		[/][#|マージするブランチの名前]
		[/]git merge [#1]
	/E
	指定したブランチを現在のブランチにマージ（--no-ff）... |
		[/][#|マージするブランチの名前]
		[/]git merge --no-ff [#1]
	/E
	-
	マージを中止する（エディターなどでの編集前） | git merge --abort
	マージを中止する（エディターなどでの編集後） | git reset --hard HEAD
	-
	マージツールを起動 | git mergetool
	-
	指定したブランチの最新コミットを現在のブランチにリベース... |
		[/][#|リベース対象のブランチの名前]
		[/]git rebase [#1]
	/E
	コミット履歴の編集（リベース）... |
		[/][#|始点の１つ前のコミット（先頭の場合は"--root"）]
		[/]git rebase -i [#1]
	/E
	リベースの継続 | git rebase --continue
	リベースの中止 | git rebase --abort
	-
	指定したコミットを現在のブランチにチェリーピック... |
		[/][#|チェリーピックするブランチの名前]
		[/]git cherry-pick [#1]
	/E
..

+リセット
	ステージングエリアの状態を最新のコミットの状態に戻す | git reset
	同上（指定したファイルのみ）... |
		[/][#|リセットするファイルの名前（ワイルドカード可）]
		[/]git reset [#1]
	/E
	-
	指定したコミットまでリセットする（--hard）...|
		[/][#|リセットのターゲットになるコミット]
		[/]git reset --hard [#1]
	/E
	指定したコミットまでリセットする（--mixed）...|
		[/][#|リセットのターゲットになるコミット]
		[/]git reset --mixed [#1]
	/E
	指定したコミットまでリセットする（--soft）...|
		[/][#|リセットのターゲットになるコミット]
		[/]git reset --soft [#1]
	/E
..

+スタッシュ
	作業中の内容をスタッシュに保存 | git stash push
	作業中の内容をスタッシュに保存（メッセージ付き）... |
		[/][#|スタッシュメッセージを入力]
		[/]git stash push -m "[#1]"
	/E
	作業中の内容をスタッシュに保存（新規ファイルも含む） | git stash push -u
	同上（メッセージ付き）... |
		[/][#|スタッシュメッセージを入力]
		[/]git stash push -u -m "[#1]"
	/E
	-
	スタッシュの内容を作業ディレクトリに戻す | git stash pop
	-
	スタッシュのリストを表示 | git stash list
	スタッシュの内容を表示... |
		[/][#|スタッシュのID番号（数字のみ）を入力]
		[/]git stash show stash@{[#1]}
	/E
	-
	スタッシュのトップのみをクリア | git stash drop
	スタッシュをクリア | git stash clear
..

+リモート
	リモートの表示 | git remote
	リモートの表示（詳細を表示） | git remote -v show origin
	-
	リモートを追加... |
		[/][#|リモートの名前（originなど）を入力|リモートのURL（またはフルパス名）を入力]
		[/]git remote add [#1] [#2]
	/E
	リモートのリネーム... |
		[/][#|現在の名前を入力 | 新しい名前を入力]
		[/]git remote rename [#1] [#2]
	/E
	リモートのURLを変更... |
		[/][#|新しいURLを入力]
		[/]git remote set-url origin [#1]
	/E
	リモートを削除... |
		[/][#|削除するリモートの名前]
		git remote remove [#1]
	/E
	-
	リモートに存在するブランチやタグを表示 | git ls-remote
..

+プッシュ／プル
	現在のブランチをプッシュ | git push
	mainブランチをoriginにプッシュ | git push origin main
	-
	指定したブランチをoriginにプッシュ... |
		[/][#|プッシュするブランチの名前]
		[/]git push origin [#1]
	/E
	指定したブランチをoriginにプッシュ（上流ブランチも設定）... |
		[/][#|プッシュするブランチの名前]
		[/]git push -u origin [#1]
	/E
	-
	リモートリポジトリから現在のブランチにプル | git pull
	-
	リモートリポジトリの更新内容をフェッチ | git fetch
	リモートリポジトリの更新内容をフェッチ（--prune） | git fetch --prune
	指定したリモートリポジトリから特定のブランチの更新内容をフェッチ... |
		[/][#|リモートリポジトリの名前（originなど）|ブランチ名（mainなど）]
		[/]git fetch [#1] [#2]
	/E
	リモートリポジトリからタグを取得 | git fetch --tags
	-
	FETCH_HEADを現在のブランチにマージ | git merge FETCH_HEAD
..

+タグ
	タグの一覧を表示 | git tag -n
	-
	HEADの位置に軽量タグを作成 | git tag 
	注釈タグを作成... | 
		[/][#|タグの名前|タグの説明|関連付けるコミット（省略可）]
		[/]git tag -am "[#2]" [#1] [#3]
	/E
	-
	タグを削除 | git tag -d <tag>[!K5 "LEFT"]
	-
	リモートリポジトリからタグを取得 | git fetch --tags
	指定したタグをリモートリポジトリに追加 | git push origin <tag>[!K5 "LEFT"]
	指定したタグをリモーリポジトリトから削除 | git push origin :<tag>[!K5 "LEFT"]
..
+その他
	管理対象ファイル（ステージングエリア）の一覧 | git ls-files
	管理対象ファイル（ステージングエリア）の一覧（詳細） | git ls-files -s
	-
	Gitオブジェクトのコンテンツを表示... |
		[/][#|目的のGitオブジェクトのハッシュ値（ID）を入力]
		[/]git cat-file -p [#1]
	/E
	Gitオブジェクトのタイプ（commit, tree, blob, tag）を表示... |
		[/][#|目的のGitオブジェクトのハッシュ値（ID）を入力]
		[/]git cat-file -t [#1]
	/E
	-
	指定したファイルの各行を変更したコミットを表示... |
		[/][#|調査するファイルの名前]
		[/]git blame -- [#1]
	/E
	指定したファイルの各行を変更したコミットを表示（範囲指定）... |
		; PowerShellの場合には、先頭行または最終行のどちらか一方だけを省略すると
		; エラーになります！
		[/][#|調査するファイルの名前|先頭行（省略可：PowerShellでは省略不可）|最終行（省略可：PowerShellでは省略不可）]
		[/]git blame -L [#2],[#3] -- [#1]
	/E
..
-
+各種の設定
	Gitのアップデート | git update-git-for-windows
	-
	+ローカル
		特定のキーの設定内容を表示... |
			[/][#|表示するキー（remote.origin.urlなど）を入力]
			[/]git config --get [#1]
		/E
		設定内容の一覧表示 | git config --local --list
		-
		設定ファイルを直接編集 | git config --local --edit
	..
	+グローバル
		特定のキーの設定内容を表示... |
			[/][#|表示するキー（user.nameなど）を入力]
			[/]git config --get [#1]
		/E
		設定内容の一覧表示 | git config --global --list
		-
		設定ファイルを直接編集 | git config --global --edit
		-
		user.nameの設定... |
			[/][#|コミットなどに使用するユーザー名を入力]
			[/]git config --global user.name "[#1]"
		/E
		user.emailの設定... |
			[/][#|コミットなどに使用するemailを入力]
			[/]git config --global user.email "[#1]"
		/E
		core.autocrlfの設定（改行コードの変換なし）... |
			[/]git config --global core.autocrlf false
		/E
		core.quotepathの設定（日本語のファイル名を使用）... |
			[/]git config --global core.quotepath false
		/E
		alias.???の設定... |
			[/][#|設定するaliasの名前（alias.???の"???"の部分）を入力 |
			設定するコマンドの内容を入力]
			[/]git config --global alias.[#1] "[#2]"
		/E
		-
		使用するエディタの設定... |
			[/][#|使用するエディターのフルパス名を入力]
			[/]git config --global core.editor '[#1]'
		/E
	..
	-
	正規表現で設定項目を検索... |
		[/][#|検索するテキストを正規表現で入力]
		git config --get-regexp "[#1]"
	/E
..
